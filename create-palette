#!/bin/zsh

# Check if at least one color and an output file are provided
if [[ $# -lt 2 ]]; then
  echo "Usage: $0 <output_file> <color1> <color2> ... <colorN>"
  echo "Accepted formats for colors: #RRGGBBAA, #RRGGBB, RRGGBBAA, RRGGBB, rgb(r, g, b), rgba(r, g, b, a)"
  exit 1
fi

# Extract the output file name
output_file=$1
shift  # Remove the output file from the list of arguments

# Function to normalize colors (adds '#' if necessary)
normalize_color() {
  local color=$1

  # If the color is in HEX format without a hashtag, add it
  if [[ $color =~ ^[0-9A-Fa-f]{6}([0-9A-Fa-f]{2})?$ ]]; then
    echo "#$color"
  else
    echo "$color"
  fi
}

# Function to validate color formats
is_valid_color() {
  local color=$1

  # Match HEXA (#RRGGBBAA or #RRGGBB), rgb(), or rgba()
  if [[ $color =~ ^#[0-9A-Fa-f]{6}([0-9A-Fa-f]{2})?$ || \
        $color =~ ^rgb\([[:space:]]*[0-9]{1,3}[[:space:]]*,[[:space:]]*[0-9]{1,3}[[:space:]]*,[[:space:]]*[0-9]{1,3}[[:space:]]*\)$ || \
        $color =~ ^rgba\([[:space:]]*[0-9]{1,3}[[:space:]]*,[[:space:]]*[0-9]{1,3}[[:space:]]*,[[:space:]]*[0-9]{1,3}[[:space:]]*,[[:space:]]*(0(\.[0-9]+)?|1(\.0+)?)?[[:space:]]*\)$ ]]; then
    return 0  # Valid color
  fi

  return 1  # Invalid color
}

# Validate and normalize each color input
normalized_colors=()
for color in "$@"; do
  normalized_color=$(normalize_color "$color")
  if ! is_valid_color "$normalized_color"; then
    echo "Invalid color format: $color"
    echo "Accepted formats: #RRGGBBAA, #RRGGBB, RRGGBBAA, RRGGBB, rgb(r, g, b), rgba(r, g, b, a)"
    exit 1
  fi
  normalized_colors+=("$normalized_color")
done

# Create a palette file using the normalized colors
magick -size 50x"${#normalized_colors[@]}" \
  $(for color in "${normalized_colors[@]}"; do echo "xc:$color"; done) \
  -append "$output_file"

# Notify the user
if [[ $? -eq 0 ]]; then
  echo "Palette created successfully: $output_file"
else
  echo "Failed to create palette."
  exit 1
fi